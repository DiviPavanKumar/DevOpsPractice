DevOps technical interview questions which I attended recently...
1. Day to day 𝗮𝗰𝘁𝗶𝘃𝗶𝘁𝗶𝗲𝘀 in DevOps Cloud. 
2. How effective did you used 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 and 𝗗𝗼𝗰𝗸𝗲𝗿 in day to day activity. 
3. What happens when you run a container in Kubernetes? Explain the internal workings. 
4. Can you explain the 𝘀𝗲𝗰𝘂𝗿𝗶𝘁𝘆 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 which is available in 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
5. Can you explain the 𝗰𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁𝘀 of 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
6. Are you aware of the 𝗲𝘅𝗶𝘁 𝗰𝗼𝗱𝗲. 
7. There is an existing 𝗽𝗼𝗱 which is 𝗻𝗼𝘁 getting 𝘀𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗱. How will you fix this issue. 
8. You have the exposure to 𝗶𝗻𝗰𝗶𝗱𝗲𝗻𝘁 𝗺𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁 right? How will you 𝗰𝗮𝘁𝗲𝗴𝗼𝗿𝗶𝘇𝗲 the 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆 
9. How do Prometheus and Grafana interact? What is the source of data for Prometheus?. 
10. Explain how Linux mechanisms work, especially when the system starts.. 
11. How can we enable communication between 500 AWS accounts internally?
12. Difference between 𝗜𝗥 and 𝗦𝗥 
13. What about the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴 part. Do you have any exposure to that? 
14. What are the things you will do with respect to the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴? 
15. Define 𝗹𝗼𝗴𝘀 and 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 
16. So let's consider, in your 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱, you observed from one application or one 𝗰𝗹𝘂𝘀𝘁𝗲𝗿 the 𝘂𝘁𝗶𝗹𝗶𝘇𝗮𝘁𝗶𝗼𝗻 was 𝗵𝗶𝗴𝗵. Which were you can identify using the 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱 with the 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 which is already created. So what will be the first step and how will you 𝗳𝗶𝘅 the 𝗶𝘀𝘀𝘂𝗲. 
17. Do you have any experience in 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝘀? 
18. What is a sidecar container in Kubernetes, and what are its use cases?
19. Do you have any exposure to 𝗜𝗔𝗖 tools like 𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺? 
20. Write some sample 𝗗𝗼𝗰𝗸𝗲𝗿𝗳𝗶𝗹𝗲 to create an 𝗡𝗴𝗶𝗻𝘅 𝗶𝗺𝗮𝗴𝗲 
21. What do you know about 𝘁𝗲𝘀𝘁𝗶𝗻𝗴

****Common interview Question For Cloud & DevOps****
1. What scripting languages are you familiar with?
2. What are artifacts in GitLab CI?
3. What is a private module registry in Terraform?
4. If you delete the local Terraform state file and it's not stored in S3 or DynamoDB, how can you recover it?
5. How do you import resources into Terraform?
6. What is a dynamic block in Terraform?
7. How can you create EC2 instances in two different AWS accounts simultaneously using Terraform?
8. How do you handle an error stating that the resource already exists when creating resources with Terraform?
9. How does Terraform refresh work?
10. How would you upgrade Terraform plugins?
11. What are the different types of Kubernetes volumes?
12. If a pod is in a crash loop, what might be the reasons, and how can you recover it?
13. What is the difference between StatefulSet and DaemonSet?
14. What is a sidecar container in Kubernetes, and what are its use cases?
15. If pods fail to start during a rolling update, what strategy would you use to identify the issue and rollback?
16. How can we enable communication between 500 AWS accounts internally?
17. How to configure a solution where a Lambda function triggers on an S3 upload and updates DynamoDB?
18. What is the standard port for RDP?
19. How do you configure a Windows EC2 instance to join an Active Directory domain?
20. How can you copy files from a Linux server to an S3 bucket?
21. What permissions do you need to grant for that S3 bucket?
22. What are the different types of VPC endpoints and when do you use them?
23. How to resolve an image pullback error when using an Alpine image pushed to ECR in a pipeline?
24. What is the maximum size of an S3 object?
25. What encryption options do we have in S3?
26. Can you explain IAM user, IAM role, and IAM group in AWS?
27. What is the difference between an IAM role and an IAM policy document?
28. What are inline policies and managed policies?
29. How can we add a load balancer to Route 53?
30. What are A records and CNAME records?
31. What is the use of a target group in a load balancer?
32. If a target group is unhealthy, what might be the reasons?
33. Can you share your screen and write a Jenkins pipeline?
34. How do you write parallel jobs in a Jenkins pipeline?
----------------------------------------------------------------------------------
Maven & Jenkins Cheat Sheet for DevOps Engineers!

For DevOps engineers, Maven and Jenkins are essential for streamlined builds and CI/CD. Here’s a quick guide to master these tools:

🔹 Maven Essentials 
 - Lifecycle Phases: From `mvn compile` to `mvn test`, `mvn package`, and `mvn install`, Maven automates the entire build process.
 - POM.xml: Central config for dependencies, project metadata, and output (.jar/.war/.ear).
 - Quick Build: Use `mvn clean package` to clean and package code in one command.

🔹 Jenkins Setup 
 - Installation: Install Java and Jenkins on an EC2 instance, start Jenkins with `systemctl start jenkins`, and automate CI/CD seamlessly.
 - Pipeline Integration: Build, test, and deploy projects automatically with Jenkins pipelines.

🚀 Why It’s Essential 
Mastering Maven & Jenkins brings efficiency to builds, testing, and deployment, essential for any DevOps workflow. Get hands-on and take your DevOps skills to the next level! 💡
---------------------------------------------------------------------------------
Recently Faced These Interview Questions – Sharing to Help You Ace Yours! 

Designation : AWS DEVOPS ENGINEER 
Experience : 3-5 years 

1.Explain Jenkins CI/CD.
2.Write Terraform code for an S3 bucket and attach a policy. 
3.I want to run my job today at 5 pm how do you configure it? 
4.What IAM policy? 
5.Write a Terraform code for EC2? 
6.Explain about GIT Branching in your project. 
7.Write a sample playbook. 
8.What are Glacier and Snowball? 
9.Where do you check build logs in Jenkins? 
10.What is CORS in s3? 
11.What has required one resource it was to communicate with other resources? 
12. How can we pass an argument to Docker File? 
13. What are deployment strategies? 
14. What is called an application load balancer?
15. How Kube proxy will allocate the Ip address to pods?
16. How u will configure VPC 
17. If there is suddenly the file is deleted in git how do you get it back? 
18. How do you configure the job in Jenkins? 
19. Write a script for how to push the repository and build the job in Jenkins. 
20. What is the use of the Jira tool? 
21. As a DevOps engineer why do we use Jira Tool?
-------------------------------------------------------------------------------------------------
𝟏.𝐓𝐞𝐥𝐥 𝐦𝐞 𝐚𝐛𝐨𝐮𝐭 𝐲𝐨𝐮𝐫 𝐩𝐫𝐨𝐣𝐞𝐜𝐭

My project is about automating deployment pipelines with CI/CD tools, managing infrastructure with Terraform, and using Kubernetes to organize containers.

𝟐.𝐇𝐨𝐰 𝐝𝐨𝐞𝐬 𝐆𝐢𝐭𝐋𝐚𝐛 𝐭𝐫𝐢𝐠𝐠𝐞𝐫 𝐩𝐢𝐩𝐞𝐥𝐢𝐧𝐞𝐬 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐢𝐜𝐚𝐥𝐥𝐲 𝐰𝐡𝐞𝐧 𝐚 𝐝𝐞𝐯𝐞𝐥𝐨𝐩𝐞𝐫 𝐩𝐮𝐬𝐡𝐞𝐬 𝐜𝐨𝐝𝐞?

GitLab triggers pipelines automatically when a developer pushes code by using webhooks.
some additional methods by which GitLab can trigger pipelines automatically:
1. Merge Requests
2. Scheduled Pipelines
3. API Triggers
4. Manual Triggers

𝟑.𝐇𝐨𝐰 𝐝𝐨 𝐲𝐨𝐮 𝐝𝐞𝐜𝐥𝐚𝐫𝐞 𝐝𝐞𝐩𝐞𝐧𝐝𝐞𝐧𝐭 𝐬𝐭𝐚𝐠𝐞𝐬 𝐢𝐧 𝐚 𝐂𝐈/𝐂𝐃 𝐘𝐀𝐌𝐋 𝐟𝐢𝐥𝐞?

We can declare dependent stages using the stages keyword and specifying the order of execution. For example:

stages:
 - build
 - test
 - deploy

𝟒. 𝐖𝐡𝐚𝐭 𝐢𝐬 `𝐭𝐞𝐫𝐫𝐚𝐟𝐨𝐫𝐦 𝐢𝐧𝐢𝐭`?

This command initializes a Terraform working directory by downloading necessary provider plugins and setting up the backend configuration.

𝟓.𝐖𝐡𝐚𝐭 𝐢𝐬 `𝐛𝐚𝐜𝐤𝐞𝐧𝐝.𝐭𝐟`?

This file typically contains configuration settings for remote state storage, defining how and where Terraform state is stored (e.g., S3, Azure Blob Storage).

𝟔. 𝐖𝐡𝐚𝐭 𝐝𝐨𝐞𝐬 `𝐭𝐞𝐫𝐫𝐚𝐟𝐨𝐫𝐦 𝐩𝐥𝐚𝐧 𝐝𝐨?

This command generates an execution plan, showing what actions Terraform will take to change the current state to match the desired state defined in the configuration files.

𝟕. 𝐖𝐡𝐚𝐭 𝐡𝐚𝐩𝐩𝐞𝐧𝐬 𝐢𝐟 𝐲𝐨𝐮 𝐠𝐢𝐯𝐞 𝐭𝐡𝐞 𝐰𝐫𝐨𝐧𝐠 𝐜𝐨𝐧𝐟𝐢𝐠𝐮𝐫𝐚𝐭𝐢𝐨𝐧 𝐨𝐫 𝐜𝐨𝐝𝐞 𝐢𝐧 𝐓𝐞𝐫𝐫𝐚𝐟𝐨𝐫𝐦 𝐚𝐧𝐝 𝐫𝐮𝐧 𝐢𝐭?

Wrong Configuration: If you provide incorrect configuration, Terraform will fail to plan or apply changes, usually producing error messages that indicate the issues with the configuration.

𝟖. 𝐖𝐡𝐞𝐫𝐞 𝐝𝐨 𝐲𝐨𝐮 𝐬𝐭𝐨𝐫𝐞 𝐃𝐨𝐜𝐤𝐞𝐫 𝐢𝐦𝐚𝐠𝐞𝐬?

Docker images are commonly stored in registries like Docker Hub, AWS ECR, or other private registries.

𝟗. 𝐃𝐞𝐬𝐜𝐫𝐢𝐛𝐞 𝐭𝐡𝐞 `𝐩𝐨𝐝` 𝐜𝐨𝐦𝐦𝐚𝐧𝐝?

In Kubernetes, the pod command is part of the kubectl command-line tool, which is used to manage Kubernetes clusters.

1.𝐆𝐞𝐭 𝐏𝐨𝐝𝐬:
To list all pods in a namespace:

kubectl get pods

2. 𝐃𝐞𝐬𝐜𝐫𝐢𝐛𝐞 𝐚 𝐏𝐨𝐝:
To get detailed information about a specific pod:

kubectl describe pod <pod-name>

3. 𝐂𝐫𝐞𝐚𝐭𝐞 𝐚 𝐏𝐨𝐝:
To create a pod from a YAML configuration file:

kubectl apply -f <pod-definition.yaml>

4. 𝐃𝐞𝐥𝐞𝐭𝐞 𝐚 𝐏𝐨𝐝:
To delete a specific pod:

kubectl delete pod <pod-name>

5.𝐋𝐨𝐠𝐬:
To view the logs of a pod:
kubectl logs <pod-name>

𝟏𝟎. 𝐇𝐨𝐰 𝐝𝐨 𝐲𝐨𝐮 𝐝𝐞𝐜𝐥𝐚𝐫𝐞 𝐜𝐨𝐧𝐭𝐞𝐱𝐭 𝐢𝐧 𝐊𝐮𝐛𝐞𝐫𝐧𝐞𝐭𝐞𝐬 ?

You declare context using the kubectl config command, specifying the cluster, user, and namespace.

----------------------------------------------------------------------------------------------------
Hello All, please find today interview L1 Discussion questions with Wipro
Q) What is your understanding of DevOps ? (First Question)
Q) you mentioned in resume that setup of a Jenkins CICD pipeline to automate code integration and deployment achieved 25 % faster time to market, how you calculated this 25% on which basis ?
Note: if you mentioned any % achieved then plan to explain how you calculated that % achievement
Q) What is terraform taint ?
Q) What are parameters in terraform ?
Q) What is AWS Instance store ?
Q) How did you handle cost management and alerting in AWS compared to your previous approach ?
Q) What are critical challanges you faced while using in your Organization ?
Q) What is CI process ?
Q) How you configured CICD pipelines in your organization ?
Q) What is AWS organization ?
Q) What are Security and Governance services in AWS ?
Q) What are the four R's in application cloud migration ?
Q) How do connect private servers to internet ? (this is common Question in last 3 interviews)
Q) What is hosted zone and why we use ? ( Common question in 2 interviews)
Q) What is state file and where do you store it and explain state locking ?
Q) What is your organization branching strategy ?
Q) Using shell script get date every day at 2:00 AM using crontab ?
Q) Have you used SQS and SNS in AWS ?

Recently Faced These Interview Questions – Sharing to Help You Ace Yours! 

Designation : AWS DEVOPS ENGINEER 
Experience : 3-5 years 

1. How do you uncommit the changes that have already been pushed to GitHub? 
2. If there is suddenly the file is deleted in git how do you get it back? 
3. Can you increase the size of the root volume without shutting down the instance?
4. If you lost the .pem file then how will you connect to EC2? 
5. S3 bucket having a policy for only read-only but you’re having full access for you? Can you modify s3 objects? 
6. Difference between Classic ELB and Application ELB?
7. How many subnets are assigned to the routing table? 
8. In your VPC all IPS are finished you require resources how to provision it? 
9. Are you only using cloud watch for monitoring?
10.If your using load balancing in 2 availability zones den which load balancer you should use?
11. can you write docker file where Linux env condition deploy static webserver 
12. Is it possible to run any VM in AWS without creating any EC2 instance ? 
13. I want to create a pipeline in Jenkins which needs to have 10 different stages and based on my input it needs to execute some stages not every stages how you will configure that .
14. What are the Terraform modules? Have used any modules in the project?
15. Is it possible to configure communication between 2 servers those are having private access
16. What happens when you delete /var/lib/docker/overlay?
17. Write a simple script that calls with “Foo” prints “bar” and when called with “bar” prints “foo”. Every other option should print “Try 
again”?
18. Tell all the scenarios too implement the security in Kubernetes.
19. Your EKS application is experiencing higher than expected traffic. How would you automatically scale the Pods?
20. Your team needs to be alerted when the CPU usage of any Pod in your EKS cluster exceeds 80% for more than 5 minutes. How would you set this up?
21. Your team wants a Grafana dashboard to visualize the HTTP request latency of your applications running in EKS. How would you achieve this?

#interview hashtag#question for a hashtag#DevOps Engineer position.

🔧 Git:

What is the difference between GIT & GITHUB?
What is a Distributed Version Control System (DVCS)?
What is a Centralized Version Control System (CVCS)? Difference between DVCS & CVCS?
How to overcome conflicts in Git?
What is Git clone, git pull, and git patch?
What are git merge and git stash?

☁️ AWS:

What is S3?
What is Block Storage?
How to grant access to a specific IP on S3?
What are ASG policies?
What is ElasticSearch?
Difference between Application Load Balancer (ALB) and Network Load Balancer (NLB)?
How to configure VPC peering?

⚙️ Kubernetes, Terraform:

What are the main components of Kubernetes?
What is the flow of pod creation?
What are services in Kubernetes?
What is Continuous Delivery & Continuous Deployment?
What are the key operations in Terraform?

Day to Day activities of a DevOps Engineer ☀️

Here’s a typical schedule:

11:00 AM – Morning Sync
Start the day with a quick team stand-up. We discuss ongoing tasks, deployment schedules, and any blockers. Communication keeps us aligned!

11:30 AM – Monitoring Checks
Dive into dashboards with Prometheus, Grafana. Scan for any unusual spikes or alerts. If there’s a red flag, it’s troubleshooting time!

12:30 PM – Pipeline Optimizations
Focus on improving CI/CD pipelines in Jenkins, GitHub Actions, or ArgoCD. Tweak workflows, automate tests, or add new steps to boost deployment efficiency.

02:00 PM – Lunch Break

03:30 PM – Automating Tasks
Time to tackle routine tasks with scripts or manage infrastructure with Terraform. Automating manual work helps us scale and stay efficient.

07:00 PM – Collaboration & Troubleshooting
Spend time working with developers, DBAs, and security teams to solve issues, optimize systems, and brainstorm improvements.

08:00 PM – End-of-Day Checks
Review system health and double-check any final deployments. Ensure all systems are stable before signing off for the day.

🔁 Repeat tomorrow, because in DevOps, we’re always evolving and improving
----------------------------------------------------------------------------------

1. What is a Pod in Kubernetes? Create a pod.yaml for a single-container pod running Nginx.
2. What is a Deployment in Kubernetes? Write a deployment.yaml for deploying 3 replicas of an Nginx container.
3. What is a Service in Kubernetes, and what are the types of Services?
4. When would you use each type of Kubernetes Service (ClusterIP, NodePort, LoadBalancer, ExternalName)?
5. Write a simple Terraform script to provision a virtual machine on AWS.
6. Explain port, targetPort, and nodePort in a Kubernetes service.
7. How would you expose a Kubernetes application externally?
8. What is Helm, and what are its components (Chart, Repository, Release)?
9. What is the difference between EXPOSE in a Dockerfile and docker run -p?
10. How do you run Nginx on a Linux server using Docker?
11. Explain HTTP, HTTPS, TCP, and UDP with examples.
12. What is a Dockerfile? Write a basic Dockerfile for a Node.js application.
13. What is a base image in Docker? Which base image would you use for Python or Node.js?
14. How do you check for open ports on a Linux system?
15. What are the benefits of using a firewall?
16. What is the use of Ingress and Ingress Controller in Kubernetes?
17. Explain the Kubernetes controllers: Deployment, StatefulSet, ReplicaSet, and DaemonSet.
18. What is the difference between Deployment and ReplicaSet?
19. What are Kubernetes Probes (Liveness, Readiness, Startup)?
20. What is the difference between Stateful and Stateless applications? Give examples.
21. What are Namespaces in Kubernetes?
22. What is Port Forwarding in Kubernetes?
---------------------------------------------------
1. How do you uncommit the changes that have already been pushed to GitHub?
2. If there is suddenly the file is deleted in git how do you get it back?
3. Can you increase the size of the root volume without shutting down
the instance?
4. If you lost the .pem file then how will you connect to EC2?
5. S3 bucket having a policy for only read-only but you’re having full access for you? Can you modify s3 objects?
6. Difference between Classic ELB and Application ELB?
7. How many subnets are assigned to the routing table?
8. In your VPC all IPs are finished you require resources how to provision it?
9. Are you only using cloud watch for monitoring?
10. If you are using load balancing in 2 availability zones then which load
balancer you should use?
11. can you write docker file where Linux env condition deploy static webserver
12. Is it possible to run any VM in AWS without creating any EC2 instance ?
13. I want to create a pipeline in Jenkins which needs to have 10 different stages and based on my input it needs to execute some stages not every stages how you will configure that.
14. What are the Terraform modules? Have used any modules in the project?
15. Is it possible to configure communication between 2 servers those
are having private access
16. What happens when you delete /var/lib/docker/overlay?
17. Write a simple script that calls with “Foo” prints “bar” and when called with “bar” prints “foo”. Every other option should print “Try
again”?
18. Tell all the scenarios too implement the security in Kubernetes.
19. Your EKS application is experiencing higher than expected traffic.
How would you automatically scale the Pods?
20. Your team needs to be alerted when the CPU usage of any Pod in your EKS cluster exceeds 80% for more than 5 minutes. How would you set this up?
21. Your team wants a Grafana dashboard to visualize the HTTP request latency of your applications running in EKS. How would you achieve this?
----------------------------------------------------------------
1. What is a Pod in Kubernetes?

 A Pod is the smallest deployable unit in Kubernetes. It represents a single instance of a running process in your cluster and can contain one or more containers.
yaml
CopyEdit
# pod.yaml
apiVersion: v1
kind: Pod
metadata:
 name: nginx-pod
spec:
 containers:
 - name: nginx
 image: nginx
 ports:
 - containerPort: 80

2. What is a Deployment in Kubernetes? Write a deployment.yaml for deploying 3 replicas of an Nginx container.

 A Deployment is a controller that ensures the desired number of pod replicas are running. It allows rolling updates and rollbacks.
yaml
CopyEdit
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-deployment
spec:
 replicas: 3
 selector:
 matchLabels:
 app: nginx
 template:
 metadata:
 labels:
 app: nginx
 spec:
 containers:
 - name: nginx
 image: nginx
 ports:
 - containerPort: 80

3. What is a Service in Kubernetes, and what are the types?

 A Service exposes a set of pods as a network service.
 Types:
ClusterIP (default) – internal access within the cluster
NodePort – exposes service on each Node’s IP at a static port
LoadBalancer – exposes service via a cloud provider’s load balancer
ExternalName – maps service to an external DNS name

4. When would you use each type of Kubernetes Service (ClusterIP, NodePort, LoadBalancer, ExternalName)?

ClusterIP – internal communication (e.g., between microservices)
NodePort – expose service for testing/dev on a static port
LoadBalancer – expose to the internet in cloud environments
ExternalName – route to external services like database.example.com

5. Explain port, targetPort, and nodePort in a Service.

port: Port exposed by the Service (used inside the cluster)
targetPort: Port on the Pod the traffic is forwarded to
nodePort: (for NodePort type) External port on the node

6. How would you expose a Kubernetes app externally?

Use a LoadBalancer service (cloud)
Use NodePort (local/testing)
Use Ingress with an Ingress Controller

7. What is Helm, and what are its components (Chart, Repository, Release)?

Chart: A packaged Kubernetes application (YAML + templates)
Repository: Stores charts
Release: A deployed instance of a chart in a cluster

8. What is the difference between EXPOSE in a Dockerfile and docker run -p?

EXPOSE (Dockerfile): declares the container listens on a port (docs only)
-p (docker run): actually maps a container port to a host port

9. How do you run Nginx on a Linux server using Docker?
bash
CopyEdit
docker run -d -p 80:80 --name nginx nginx
-------------------------------------------
Most Important DevOps Terms You Should Know

1. Terraform: Open source tool for defining and provisioning infrastructure as code.
2. Version Control: System to record and manage changes to files over time.
3. Virtual Machine (VM): Software-based computer running an OS and applications.
4. YAML: Human-readable data serialization standard used for configuration files.
5. Agile: Development methodology for continuous iteration of development and testing.
6. Automation: Technology to perform tasks without human intervention, essential for CI/CD.
7. Cloud Computing: Delivery of computing services over the internet for scalability.
8. Container: Executable package containing everything needed to run software consistently.
9. Docker: Platform for developing, shipping, and running applications inside containers.
10. Kubernetes: Platform for automating deployment, scaling, and operations of application containers.
11. Microservices: Architectural style of structuring applications as small, autonomous services.
12. Monitoring: Collecting and analyzing data to track application and infrastructure performance.
13. Serverless: Cloud execution model with dynamic resource management by the provider.
14. SLA (Service Level Agreement): Contract specifying performance standards between a provider and a customer.
15. Source Control: Practice of tracking and managing code changes.

By understanding these terms, you can effectively navigate the DevOps landscape and contribute to your team's success.

-------------------------------------------------------------------------------------------------------------------------

Git:

What will happen if you do `git fetch`?

  `git fetch` updates your local repository with the latest changes from the remote repository, but it doesn't modify your working directory or merge those changes into your current branch. 
  It just pulls the new commits and data.

What's the difference between `git merge` and `git rebase`?
	* `git merge` combines changes from one branch into another, creating a new merge commit. It preserves the history of both branches.
	* `git rebase` moves or "replays" commits from one branch onto another, creating a linear history without merge commits. It rewrites the commit history.
	Merge: Preserves the commit history of both branches, creating a new merge commit. 
	Rebase: Rewrites commit history, proving a liner and clear history.

What's the difference between `git pull` and `git fetch`?
	* `git pull`: Downloads updates from the remote repository and automatically merges them into your current local branch.
	* `git fetch`: Downloads updates from the remote repository but doesn't merge them into your local branch.

Explain about GIT Branching in your project:
	In a Git project, branching allows multiple developers to work on different features or fixes simultaneously without interfering with each other’s work. Typically:
		1. Main branch (main or master): The stable production-ready branch.
		2. Feature branches: Used for developing new features (e.g., feature/login-page).
		3. Bugfix branches: For fixing bugs (e.g., bugfix/crash-on-login).
		4. Release branches: For preparing production releases (e.g., release/v1.0).
		5. Hotfix branches: For urgent fixes to production (e.g., hotfix/critical-fix).
	After work on a branch is complete, it's merged back into the main branch.

What is the git workflow?
	A common Git workflow involves the following steps:

		1. Clone the repository: git clone <repo-url>.
		2. Create a new branch for your work: git checkout -b <branch-name>.
		3. Make changes to the code and commit them: git add . and git commit -m "message".
		4. Push your branch to the remote repository: git push origin <branch-name>.
		5. Create a Pull Request (PR) to merge your changes into the main branch.
		6. Review and merge the PR after approval.

	This workflow keeps the main branch stable while allowing for parallel development.

What is git cherry pick?
	Git cherry-pick is a command that lets you apply a specific commit from one branch to another. You pick a commit by its ID, and Git copies its changes into your current branch.
	
	
Jenkins:

What is the difference between continuous Delivery and Deployment?

  Continuous Delivery ensures that code is always ready to be deployed to production, but deployment requires manual approval.
  Continuous Deployment automates the entire process, deploying every change to production automatically without manual intervention.
  
How to run a particular stage in jenkins pipeline?

  To run a particular stage in a Jenkins pipeline, you can use the "Build with Parameters" option and specify the stage using the `when` condition or manually trigger the 
  specific stage with `input` step or by using a script in the pipeline. Another approach is to comment out the other stages temporarily and run the desired one.

While running a job in jenkins, build got failed. How will you resolve that?
	To resolve a failed Jenkins build:

		1. Check Logs: Review the build console output for error details.
		2. Identify Cause: Look for issues like syntax errors, missing dependencies, or configuration problems.
		3. Fix Issue: Update code, pipeline script, or environment (e.g., install missing plugins or dependencies).
		4. Test Locally: Reproduce and verify the fix locally if possible.
		5. Retry Build: Trigger the job again in Jenkins.
		6. Monitor: Ensure the build completes successfully or repeat steps if it fails again.
	
		What type of error we may get?
		Common errors in a failed Jenkins build include:

		1. Syntax Errors: Incorrect code or script syntax in the pipeline or application.
		2. Dependency Issues: Missing libraries, packages, or plugins required for the build.
		3. Configuration Errors: Wrong environment variables, credentials, or Jenkins settings.
		4. Network Issues: Failure to connect to repositories, APIs, or external services.
		5. Permission Errors: Insufficient access to files, directories, or resources.
		6. Resource Limits: Insufficient memory, CPU, or disk space.
		7. Test Failures: Unit or integration tests failing due to code issues.
		8. Timeout Errors: Build taking too long, exceeding configured time limits.

Docker:

What is the Home Directory(path) of Docker?

  Linux: /var/lib/docker
  
How to integrate a docker server in Jenkins?

  To integrate a Docker server in Jenkins:
  1. Install Docker on the Jenkins server.
  2. Install the Docker plugin in Jenkins (Manage Jenkins > Manage Plugins > Docker Plugin).
  3. Configure Docker in Jenkins:
      * Go to Manage Jenkins > Configure System.
      * Under Cloud, add a Docker Cloud and provide Docker server details (e.g., Docker API URL, credentials).
  4. Use Docker in Jenkins Pipeline with commands like docker build, docker run, or docker-compose in your Jenkinsfile.
  This allows Jenkins to interact with Docker for building, testing, and deploying containers.

Write a dockerfile using a linux and a webserver?

  # Use an official Linux base image (Ubuntu in this case)
    FROM ubuntu:latest
  # Install Nginx web server
    RUN apt-get update && apt-get install -y nginx
  # Copy website files to the Nginx default directory
    COPY ./html /var/www/html
  # Expose port 80 to access the web server
    EXPOSE 80
  # Start Nginx when the container runs
    CMD ["nginx", "-g", "daemon off;"]
	
What's the difference between CMD and ENTRYPOINT in Docker?

	• CMD provides default commands or arguments that run when the container starts.
	  You can override it by passing a command when running the container.
	• ENTRYPOINT defines the main executable for the container. It always runs, and
	  cannot be overridden the same way.
	• If you try to pass a command when ENTRYPOINT is defined, it will append the
	  command to ENTRYPOINT instead of replacing it.
	• When used together, CMD can act as default arguments for the ENTRYPOINT
	  executable.
	• This combination gives you flexibility and control: ENTRYPOINT ensures a
	  specific binary runs, while CMD provides modifiable defaults. 

	Best practice: Combine both for consistent yet flexible container behavior.

What's the difference between COPY and ADD in Docker?
	• COPY is used to copy files and directories from the host to the image.
	• ADD does the same but also supports downloading files from URLs and
	  automatically extracting .tar archives.
	Use COPY by default, and use ADD only when you need its additional features.

What's the difference between ARG and ENV in Docker?
	• ARG:
		o Used in Dockerfile with ARG instruction.
		o Only available during build time (docker build).
		o Passed at build time using --build-arg (e.g., docker build --build-arg
		  VAR=value).
		o Not available in the running container unless set as ENV.
	• ENV:
		o Used in Dockerfile with ENV instruction.
		o Available during build time and runtime (inside the container).
		o Can be overridden at runtime using -e (e.g., docker run -e VAR=value).
	• Can ARG be passed at runtime?
		o No, ARG is only for build time. It cannot be passed during docker run.
		  Use ENV for runtime variables. 
	
Where you used docker to solve a specific problem?
	I used Docker to create consistent development environments for a team, ensuring all developers had the same dependencies and versions, eliminating "works on my machine" issues.
	
There are multiple stopped containers and unused network taking up spaces. How you will clean up these resources effectively?
	$ docker system prune -a
	Be cautious with prune commands as they permanently delete resources.
	
Kubernetes:

Architecture of Kubernetes?

	Kubernetes architecture consists of two main components:

	1. Control Plane:
		* API Server: Manages API requests and communicates with other components.
		* Scheduler: Assigns workloads (pods) to nodes.
		* Controller Manager: Ensures desired state of the system (e.g., scaling, replication).
		* etcd: Key-value store for cluster data.
	2. Node (Worker Node):
		* Kubelet: Ensures containers run in pods as expected.
		* Kube Proxy: Manages network routing and load balancing for services.
		* Container Runtime: Runs containers (e.g., Docker, containerd).

	The Control Plane manages the cluster, while Nodes run the workloads.

What's the difference between Kubernetes deployment and Statefulset?
	* Deployment: Used for stateless applications, where each pod is identical and can be replaced easily. It ensures desired replicas are running and updates pods in a rolling manner.

	* StatefulSet: Used for stateful applications, where each pod has a unique identity, persistent storage, and stable network identity. It ensures proper ordering and  stable storage for each pod.

What is namespace?
	namespaces are used for dividing cluster resources between multiple users. They are meant for environments where there are many users spread across projects or teams and provide a scope of resources.

What are the different services available within kubernetes?
	Kubernetes services include:

		1. ClusterIP: Default service, exposes a pod internally within the cluster.
		2. NodePort: Exposes the service on each node's IP at a static port.
		3. LoadBalancer: Exposes the service externally using a cloud provider's load balancer.
		4. ExternalName: Maps a service to an external DNS name without creating a proxy.
		5. Headless: Allows direct access to individual pods without a single IP, often used for stateful applications.
		
What is the types deployment stategy of kubernetes?
	Kubernetes deployment strategies include:

		1. Recreate: Terminates all old pods and creates new ones.
		2. Rolling Update: Gradually replaces old pods with new ones, ensuring minimal downtime.
		3. Blue/Green: Deploys new version alongside old, then switches traffic to new version.
		4. Canary: Deploys new version to a small subset of users before full rollout.
		5. A/B Testing: Tests new version with specific user groups based on conditions.

Ansible:

How to run a specific task on Ansible Playbook which contains 10 tasks?
	Tag the task in the playbook:

	- name: Example task
	  ansible.builtin.debug:
		msg: "Running specific task"
	  tags: mytask
	  
	Run the playbook with the --tags option:

	ansible-playbook playbook.yml --tags mytask

	Note: Only tasks with the specified tag (mytask) will run.
	
Terraform:

What is statefile?
    A statefile in Terraform is a JSON file (terraform.tfstate) that tracks the current state of your infrastructure. It records resource configurations, attributes, and dependencies, allowing Terraform to manage and update resources accurately.	
	statefile contains the history of deployment.
When state file will be created?
    The Terraform statefile (terraform.tfstate) is created when you run `terraform apply` or `terraform init` followed by `terraform plan` and `terraform apply` for the first time in a project directory.	

----------------------------------------------------------------------------------------------------------------------

#Docker Scenario-Based Interview Questions & Answers:

# Scenario_1
	You have a docker container running a web server, but you need to update the application code inside it.
	How would you approch this?
	
	Approach:
		1. Update the application code in the project directory.
		2. Rebuild the Docker image with the updated code: docker build -t image-name .
		3. Stop and remove the old container: docker stop container-name && docker rm container-name
		4. Run a new container with the updated image: docker run -d -p port:port image-name
		5. Alternatively, use a volume to mount updated code without rebuilding: docker run -v /local/code:/container/code ...

# Scenario_2
	Your team is deploying a microservices architecture using Docker containers.
	How would you orchestrate and manage these containers effectively?
	
	Approach:
		1. Use Kubernetes or Docker Compose for orchestration.
			* Docker Compose: Define services in docker-compose.yml for local development.
			* Kubernetes: Use deployments, services, and ingress for production.
		2. Manage networking with service discovery and load balancing.
		3. Monitor with tools like Prometheus and Grafana.
		4. Automate deployments with CI/CD pipelines (e.g., Jenkins, GitLab CI).

# Scenario_3
	You have encountered a problem where a Docker container keeps crashing without any clear error message.
	How would you troubleshoot and diagnose this issue?
	
	Approach:
		1. Check container logs: docker logs container-name
		2. Inspect container details: docker inspect container-name
		3. Run the container interactively: docker run -it image-name /bin/sh to debug.
		4. Verify resource limits (CPU, memory) and configuration (e.g., env variables).
		5. Review application errors or missing dependencies.
		6. Test with a minimal setup to isolate the issue.

# Scenario_4
	Your team needs to share data between multiple Docker containers.
	How would you accomplish this while maintaining isolation between the containers?
	
	Approach:
		1. Use Docker Volumes to share data: docker volume create shared-volume
		2. Mount the volume to multiple containers: docker run -v shared-volume:/data ...
		3. Alternatively, use a shared network for communication (e.g., via APIs).
		4. Ensure proper permissions and isolation with user namespaces and access controls.

# Scenario_5
	You need to ensure that your Docker containers are secure and compliant with company policies.
	What security best practices would you implement?
	
	Best Practices:
		1. Use minimal base images (e.g., alpine).
		2. Scan images for vulnerabilities: docker scan image-name
		3. Run containers as non-root users: USER nonroot in Dockerfile.
		4. Limit container privileges: Use --cap-drop and --read-only flags.
		5. Enable Docker Content Trust for image signing.
		6. Use secrets management for sensitive data (e.g., Docker secrets or Kubernetes secrets).
		7. Regularly update images and apply security patches.

#Kubernetes Scenario-Based Interview Questions & Answers:

# Scenario_1
	Your company is migrating its monolithic application to a microservices architecture on Kubernetes. 
	How would you plan and execute this migration?
# Scenario_2 
	You have a stateful application that requires persistent storage in Kubernetes. 
	How would you configure persistent storage for this application?
# Scenario_3
	You're experiencing performance issues with your Kubernetes cluster.
	How would you diagnose and resolve these issues?
# Scenario_4
	You need to deploy a kubernetes application across multiple environments(Dev, Staging, Prod) with different configurations.
	How would you manage environment-specific configurations in Kubernetes?
# Scenario_5
	Your team wants to implement rolling updates for a Kubernetes deployment to minimize downtime during application upgrades.
	How would you achieve this?

Few Interview questions....forwarding as received....
1. What scripting languages are you familiar with?
2. What are artifacts in GitLab CI?
3. What is a private module registry in Terraform?
4. If you delete the local Terraform state file and it's not stored in S3 or DynamoDB, how can you recover it?
5. How do you import resources into Terraform?
6. What is a dynamic block in Terraform?
7. How can you create EC2 instances in two different AWS accounts simultaneously using Terraform?
8. How do you handle an error stating that the resource already exists when creating resources with Terraform?
9. How does Terraform refresh work?
10. How would you upgrade Terraform plugins?
11. What are the different types of Kubernetes volumes?
12. If a pod is in a crash loop, what might be the reasons, and how can you recover it?
13. What is the difference between StatefulSet and DaemonSet?
14. What is a sidecar container in Kubernetes, and what are its use cases?
15. If pods fail to start during a rolling update, what strategy would you use to identify the issue and rollback?
16. How can we enable communication between 500 AWS accounts internally?
17. How to configure a solution where a Lambda function triggers on an S3 upload and updates DynamoDB?
18. What is the standard port for RDP?
19. How do you configure a Windows EC2 instance to join an Active Directory domain?
20. How can you copy files from a Linux server to an S3 bucket?
21. What permissions do you need to grant for that S3 bucket?
22. What are the different types of VPC endpoints and when do you use them?
23. How to resolve an image pullback error when using an Alpine image pushed to ECR in a pipeline?
24. What is the maximum size of an S3 object?
25. What encryption options do we have in S3?
26. Can you explain IAM user, IAM role, and IAM group in AWS?
27. What is the difference between an IAM role and an IAM policy document?
28. What are inline policies and managed policies?
29. How can we add a load balancer to Route 53?
30. What are A records and CNAME records?
31. What is the use of a target group in a load balancer?
32. If a target group is unhealthy, what might be the reasons?
33. Can you share your screen and write a Jenkins pipeline?
34. How do you write parallel jobs in a Jenkins pipeline?

Recent Interview questions for 4-6 years exp candidate.
Forwarding as received!
1. Can you walk us through your experience as a DevOps Engineer?
2. What has been your biggest challenge in DevOps, and how did you handle it?
3. What DevOps tools have you used for CI/CD pipeline automation? Can you describe how you set up a pipeline?
4. Have you worked with GitOps? Can you explain how it differs from traditional CI/CD?
5. How do you manage pipeline security and ensure compliance with DevSecOps best practices?
6. Have you used GitHub Actions? Can you describe a complex automation workflow you implemented?
7. How do you deploy and manage Kubernetes clusters in a production environment?
8. What challenges have you faced with Kubernetes deployments, and how did you troubleshoot them?
9. How do you handle Docker container security in a DevOps pipeline?
10. Can you explain the use of ArgoCD or Flux in an automated deployment setup?
11. Can you explain how you automate infrastructure provisioning using Terraform or Ansible?
12. How do you ensure IaC scripts remain maintainable and do not introduce vulnerabilities?
13. What experience do you have with AWS cloud technologies?
14. How do you manage multi-cloud (AWS & Azure) deployments effectively?
15. How do you optimize cloud costs while ensuring performance?
16. Have you developed applications using Java or Quarkus?
17. Can you explain the differences between RESTful APIs and GraphQL?
18. How do you handle authentication and security in API development?
19. What best practices do you follow for PostgreSQL database performance tuning?
20. Can you describe a critical production issue you encountered and how you resolved it?
21. How do you handle Incident Management (IM) and Critical Incident Management (CIM)?
22. What strategies do you use to reduce system downtime?
23. How do you approach Problem Management (PM) and Change Management (CM)?
24. What are the best practices you follow for securing applications and cloud infrastructure?
25. Have you worked with ITIL operation processes (Incident, Problem, Change management)?
26. How do you ensure compliance with industry security standards?
27. How do you integrate security scanning in CI/CD pipelines?
28. Have you worked in an Agile environment? How do you handle rapid changes in requirements?
29. How do you balance technical priorities vs. business needs?
30. How do you manage cross-functional collaboration in a DevOps team?
31. How do you handle conflict resolution within a team?
32. Have you worked with microservices architecture? How do you manage service communication and security?
33. Do you have experience with Nagios or other monitoring tools?
34. Can you describe a time when you had to mediate a dispute between team members

Interview questions
Company : Walmart
Designation : DevOps Engineer
 Experience 3 - 6 years
𝐑𝐨𝐮𝐧𝐝𝟏 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
1. What are your daily responsibilities as a DevOps engineer?
2. Have you worked with monitoring and logging tools like Prometheus, Grafana, or ELK Stack?
3. Can you describe the CI/CD workflow in your project?
4. How do you handle the continuous delivery (CD) aspect in your projects?
5. What methods do you use to check for code vulnerabilities?
6. What AWS services are you proficient in?
7. How would you access data in an S3 bucket from Account A when your application is running on an EC2 instance in Account B?
8. How do containerization technologies like Docker and Kubernetes simplify application deployment and management?
𝐑𝐨𝐮𝐧𝐝𝟐 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
8. How do you provide access to an S3 bucket, and what permissions need to be set on the bucket side?
9. How can Instance 2, with a static IP, communicate with Instance 1, which is in a private subnet and mapped to a multi-AZ load balancer?
10. For an EC2 instance in a private subnet, how can it verify and download required packages from the internet without using a NAT gateway or bastion host? Are there any other AWS services that can facilitate this?
11. What is the typical latency for a load balancer, and if you encounter high latency, what monitoring steps would you take?
12. If your application is hosted in S3 and users are in different geographic locations, how can you reduce latency?
13. Can you share an example of a complex automation script you've written?
14. How do you approach troubleshooting and debugging automation scripts?
𝐑𝐨𝐮𝐧𝐝𝟑 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
15. Which services can be integrated with a CDN (Content Delivery Network)?
16. How do you dynamically retrieve VPC details from AWS to create an EC2 instance using IaC, can you write the code?
17. How do you manage unmanaged AWS resources in Terraform?
16. How do you pass arguments to a VPC while using the terraform import command?
18. What are the prerequisites before importing a VPC in Terraform?
19. If an S3 bucket was created through Terraform but someone manually added a policy to it, how do you handle this situation using IaC?
20. Have you upgraded any Kubernetes clusters?
21. How do you deploy an application in a Kubernetes cluster?
22. How do you communicate with a Jenkins server and a Kubernetes cluster?
23. How do you generate Kubernetes cluster credentials?
24. Do you only update Docker images in Kubernetes, or do you also update replicas, storage levels, and CPU allocation?

*DevOps Interview Questions*
Company    : TCS
Experience  : 3.4 Years
Designation : DevOps Engineer
:large_orange_square: AWS & VPC
What is VPC (Virtual Private Cloud)?
How can you define a public and private subnet in a VPC?
How can an EC2 instance fetch data from the internet?
How does a request from the application reach the internet?
If Security Groups, NACLs, and NAT Gateways are restricted, how can you still connect and fetch data from S3?
How can you manage access in a VPC?
Difference between Security Group and NACL (Network ACL)?
:large_green_square: Kubernetes (K8s)
What is a Service in Kubernetes?
How does a Kubernetes Service know which Pod to send traffic to?
If you don’t set a Service in Kubernetes, how can a request still reach the app?
What is a Load Balancer in Kubernetes?
How does a request know how to reach the app if you configure Ingress?
How can you deploy applications in Kubernetes using AWS (e.g., EKS)?
If using EKS, how can one AWS service communicate with another AWS service?
:large_blue_square: Shell Scripting
Write a shell script to check if a file is empty or not.
Write a shell script to check if multiple files (e.g., 10 files) are empty or not.
:large_yellow_square: Docker
How do you write a Docker file?
How can you reduce the size of a Docker image created from a Docker file?
What are the security concerns to consider while writing a Docker file?
How would you utilize a Docker file in a CI/CD pipeline?
:large_green_circle: All the best for your next interview! You've got this! 

DevOps Interview Questions:
1. How do you execute jobs in AWS?
2. What are Ansible roles, and how do you use them?
3. How do you ensure data persistence with Docker volumes?
4. What are the key differences between Docker and Kubernetes?
5. How do you securely store credentials in GitHub?
6. Where is the Jenkinsfile typically stored?
7. How is pull request approval managed in GitHub?
8. How do you execute a shell script within a Python script?
9. What is the master-slave architecture in Jenkins?
10. How do you integrate LDAP with AWS and Jenkins?
11. What are some key features of GitHub?
12. What are some key features of Jenkins?
13. What are the benefits and uses of CI/CD?
14. What is a GitHub workflow, and how is it used?
15. How do you handle merge conflicts in Git?
16. What steps do you take when a build fails in Jenkins?

Interview questions
Company : Paytm
Designation : DevOps Engineer
𝐑𝐨𝐮𝐧𝐝 𝟏 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
1) AWS application design in current organisation
2) AWS Ec2 types volumes, difference between ALB and NLB(General Purpose SSD volumes (gp3), gp2,IO, throughput, load balancer)
3) Why your application choose the above load balancer
4) How the CORS present in S3 (Select the bucket from the list, and click Configure CORS)
5) S3 types, R53 and the use in our application ()
6) Amazon certificate manager (ACM), how the LB have the certificates intergrated
6) Kubernetes (pods managemet, memory and ram utilization check)
7) Types of Kubernetes services (loadbalancer, Ingress,
clusterip, nodeport)
𝐑𝐨𝐮𝐧𝐝 𝟐 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
8) Monitoring added to Kubernetes (Prometheus)
9)How the node port and cluster ip are managed
10)Kubernetes commands / Linux commands
11) Design the manifest file for Persistant volumes in Kubernetes
12) Docker and its layers and what are the debug factors in docker
13) Design of Jenkins with Integration of each tools like (Sonar, build tools and
ansible)
14) How the deployment is done in cloud via ansible
15) Ansible SSH keys and the architecture diagram
𝐑𝐨𝐮𝐧𝐝 𝟑 - 𝐓𝐞𝐜𝐡𝐧𝐢𝐜𝐚𝐥
16) Write the Ansible roles and playbook design for the deployment of a MYSQL
17) Jenkins roles and user management
18) Cloudfront and the use and how will the PAYTM reduces the latency(For example the image load time)
19) How to debug the REST API hit error (for example 404 or 503)
20) Tomcat and apache integration
21) How can Python be used to interact with containerisation platforms (e.g., Docker, Kubernetes)?
22) What are some common Python libraries for containerisation and orchestration?
23) Explain the role of Python in automating container deployment and management.
24) Write the Python code to hit the S3 bucket endpoints and place the object inside the bucket with the given bucket policies as json updated to the same s3 bucket.

Company    : NICE (Product-Based Company)
Designation : Azure DevOps Engineer
:jigsaw: Interview Questions by Module:
:wrench: CI/CD Pipelines (YAML + Classic)
1. How do you structure reusable YAML templates across projects and environments?
2. How do you implement approval gates, rollback logic, and artifact versioning in multi-stage pipelines?
3. What are deployment strategies you've used (blue-green, rolling, canary)? How did you implement them?
:closed_lock_with_key: Security & Secrets Management
1. How do you manage secrets across multi-stage pipelines securely?
2. What's your process to rotate Key Vault secrets used in build and release pipelines?
3. How do you restrict access to variables, key vaults, and service connections at scale?
:cloud: Infrastructure as Code (IaC)
1. Compare Terraform and Bicep in terms of scalability and disaster recovery readiness.
2. How do you manage Terraform backend and state locking in Azure Storage?
3. How do you handle cross-subscription resource deployments with IaC?
:shield: DevSecOps & Policy Enforcement
1. How do you integrate security scans (SAST/DAST) into your CI/CD workflows?
2. How do you enforce Azure Policy compliance using pipelines?
3. How do you track and alert on non-compliant resources automatically?
:package: Artifact & Dependency Management
1. How do you manage build artifacts across microservices in monorepos?
2. How do you consume and promote versioned packages across environments (Dev → QA → UAT → Prod)?
3. How do you handle version conflicts in multi-repo pipelines?
:chart_with_upwards_trend: Monitoring, Alerts & Logging
1. How do you set up alerts for pipeline failures, threshold breaches, and infrastructure drift?
2. How do you integrate Azure Monitor and Application Insights into release pipelines?
3. What's your logging and diagnostics strategy for long-running production deployments?
:gear: AKS & Cloud Deployment
1. How do you build resilient AKS deployment pipelines with health probes and auto-rollback?
2. How do you manage cluster upgrades, node pool scaling, and workload migration via pipeline?
3. How do you route traffic during blue-green deployments using Azure Front Door or Traffic Manager?
:arrows_counterclockwise: Rollback & Disaster Recovery
1. Describe your DR strategy for failed infra deployments across regions.
2. How do you automate failover for critical apps deployed via pipelines?
3. How do you recover Terraform-managed infrastructure in case of a corrupted state?

Technical Interview Questions– DevOps Engineer at Recro company
:rocket: CI/CD & DevOps Workflows
1. How do you implement retry logic for failed steps in Jenkins or GitLab CI?
2. What’s the benefit of using artifacts and caching separately in a CI pipeline?
3. How would you build a multi-environment promotion flow (Dev → QA → Prod) in a GitOps model?
:rocket: Docker & Image Management
1. How can you ensure that Docker images are reproducible and consistent across builds?
2. What is Docker BuildKit and what are its advantages?
3. How do you push Docker images to a private registry with authentication in CI pipelines?
4. How do you handle application versioning inside Docker images?
:rocket: Kubernetes & Platform Engineering
1. How do you implement cluster auto-scaling in Kubernetes?
2. What is the role of Kubernetes Admission Controllers? Provide a real-world use case.
3. How do you handle secret rotation in Kubernetes clusters?
4. What are finalizers in Kubernetes, and why are they important?
:rocket: Git & GitOps
1. How do you set up automated deployment approvals in ArgoCD before promoting to production?
2. How do you manage GitOps across multiple clusters and environments?
3. How would you troubleshoot a stuck ArgoCD sync?
:rocket: Cloud & Infrastructure (AWS / Azure / GCP)
1. How would you implement fine-grained permissions for S3 buckets in AWS?
2. What’s the best way to manage Terraform state securely in a team environment?
3. How do you set up Identity Federation for Azure AD users to access AWS resources?
4. How would you automate VM scaling in GCP based on CPU usage?
:rocket: Monitoring, Alerting & Troubleshooting
1. How do you trace latency issues across microservices in Kubernetes?
2. What’s the difference between push-based and pull-based monitoring systems?
3. How would you set up Grafana alerts based on custom metrics?
4. How do you investigate node-level failures in a Kubernetes cluster?
:rocket: Scripting & Infrastructure Automation
1. Write a Bash script to check SSL certificate expiry for a given domain.
2. How would you automate rotating IAM access keys using a Python script?
3. Use Terraform to automate VPC peering setup between two different AWS accounts.

AWS Services and General Cloud Concepts
List service names that are most familiar in AWS.
One service that is mostly used by you in day-to-day activities.
Difference between NAT Gateway & NAT Instance.
In NAT Instance what AMI will you use? Is it a generic or specific AMI?
How to enable versioning on AWS S3 Bucket?
If a file is added to S3, will it create a new version or use the existing version?
What are the permissions that we can define for an S3 bucket?
If we want to copy a file from EC2 to S3 Bucket, how to make sure the connection is not going through a public network?
What is a Lambda function in AWS? Usages with examples.
What is VPC Endpoints?
What is a Routing Table? What's the role of Routing Table (RT) in VPC?
If I am not using a default Routing Table in my VPC, how can you configure or make sure subnets are communicated?
How are resources communicated inside a subnet?
What is meant by EventBridge and its use cases?
Explain the projects which you have done so far? (e.g., 90 days Rotational keys project)
What is ELB? What is meant by session affinity in ELB?
What is Route 53? What are the types of records in Route 53?
Terraform (Infrastructure as Code)
Explain Terraform Lifecycle.
How to provision instances using Terraform? Commands that are used?
How does Terraform know that it's an implicit/explicit dependency?
How to reuse the same module which is already defined in Terraform code?
How to define required variables/optional variables in Terraform?
Kubernetes (EKS) and ArgoCD
What is AWS EKS? Use case of add-ons on AWS with examples.
How to upgrade EKS cluster versions? Examples?
What if ArgoCD is not syncing? What steps do you take to resolve the issue?
How does ArgoCD know that the current deployment is not the desired state & how does it make the deployment?
What's the system behind ArgoCD?
Docker & cicd  DevOps Tools
What are the best practices that need to be followed while creating a Docker image?
Difference between Docker ADD & Docker COPY?
If the size of the Docker image is 1 GB, how to reduce the image size?
What is CloudWatch? How to configure CloudWatch?
Stages in CI & CD Pipeline?
How to trigger ARGOCD?
What are build parameters in Jenkins?

HCL attended last month for devops role 6+ exp. They mostly focused on cicd and git
1.  Cicd flow in your org
2. Branching strategy
3. Hotfix branch and if issue happens in prod then how it is solved thru hotfix
4. In which repo codes are stored and how that repo is accessed
5. What is PAT
6. Output of sonarqube and how to configure sonarqube
7. What is self hosted agent and have you used it, if yes explain the process
8. If 2 dev working on same file and got conflict while creating PR then how to resolve

Interview Insights: SRE/DevOps Technical Questions  :computer:
 Interview Questions:
 1. What is Overlay Networking in Docker?
 2. If a container needs to access data from outside during runtime, what configuration would you make in the Dockerfile?
 3 .How would you configure the Dockerfile for a second container to use the GUID from the first container?
 4. What are Docker bind mounts?
 5 .Why are bind mounts used?
 6 .When would you use bind mounts vs persistent (default) volumes in Docker?
 7. What happens when you use the docker pause command?
 8. In Kubernetes, if there are two namespaces (e.g., customer exposed and admin not exposed), how would you configure it so the admin namespace can access resources in the customer namespace?
  9. Where would you create a role in Kubernetes?
 10. Where would you create a service account in Kubernetes?
 11. Have you ever managed passwords in Docker? How would you do that?
 12 .Other than CI/CD, what else can be done in Jenkins?
 13. Given AWS access keys, how would you create an EC2 instance (e.g., named instance-one in the Ohio region) via a Terraform file? (edited) 

DevOps Interview Questions
Hey team! Here’s a curated list of insightful DevOps interview questions to help assess candidates deeply on both tech and collaboration aspects.
:wrench: Technical Mastery & Problem Solving
1. How do you balance innovation with the need for system stability in a production environment?
2. How do you prepare your systems and team for a major product launch?
3. Tell me about a time when you identified a major risk early. What did you do about it?
4. How do you approach designing a highly scalable and resilient infrastructure for an application expected to grow 10x in traffic?
5. Describe a situation where you had to influence leadership (senior management) to invest in DevOps tooling or practices.
6. Have you ever introduced SRE (Site Reliability Engineering) practices in a team? What challenges did you face?
7. How do you ensure business continuity in case of a major cloud provider outage?
8. Tell me about a difficult trade-off you had to make regarding security vs. speed of delivery.
:rocket: Execution Under Pressure
1. Can you describe a time when you had to manage a technical project with very tight deadlines? How did you ensure success?
2. How would you manage a situation where developers frequently bypass DevOps processes for "urgent" releases?
3. How do you design your incident management and escalation processes to be effective but not overwhelming?
:handshake: Team Collaboration & Conflict Resolution
1. How do you handle disagreements in architectural decisions within the team?
2. What steps do you take to ensure cross-functional collaboration between DevOps, development, QA, and product teams?
3. How do you promote a DevOps culture in a traditional enterprise setup where change resistance is high?
4. How would you handle a team member who consistently resists adopting DevOps best practices?
:chart_with_upwards_trend: Growth, Learning & Continuous Improvement
1. How do you ensure that your team is continuously learning and adopting new technologies?
2. How do you prioritize between fixing technical debt vs. delivering new business features?
3. What’s your strategy for onboarding new team members into a complex DevOps environment?
4. What KPIs (Key Performance Indicators) would you track to measure the success of your DevOps initiatives?

DevOps Interview Questions
1. What’s the difference between build and release pipelines in Azure DevOps?
2. How do you handle rollback in your deployment pipeline?
3. How do you secure secrets and credentials in your pipeline?
4. What’s the difference between ENTRYPOINT and CMD in Docker?
5. What steps do you follow when a container crashes repeatedly?
6. How do you perform a zero-downtime deployment in Kubernetes?
7. What is a readiness probe vs. a liveness probe?
8. How do you manage application configuration in AKS?
9. What monitoring tools have you used for Kubernetes?
10. How do you centralize logs in a microservices environment?
11. What’s your approach to setting up alerts in Azure Monitor?
12. How do you handle secrets management across environments?

DevOps Interview Questions (1–3 Years Experience)
Infrastructure as Code (IaC)
Can you explain the concept of Infrastructure as Code (IaC)?
Which tools have you used (e.g., Terraform, CloudFormation), and how did you implement IaC in your previous role?
Containerization with Docker
How do you approach containerization using Docker?
What are some best practices you follow when writing Docker files or managing container lifecycles?
Configuration Management Tools
What is your experience with automation/configuration management tools like Ansible, Puppet, or Chef?
Can you describe a project where you used one of these tools and the impact it had?
Monitoring & Troubleshooting
How do you monitor and troubleshoot issues in a distributed system?
What tools have you used for logging, monitoring, and alerting (e.g., Prometheus, Grafana, ELK, Datadog)?
Cloud Platforms Experience
What is your experience with cloud providers such as AWS, Azure, or Google Cloud Platform (GCP)?
Can you give specific examples of services you used and how they supported your application/infrastructure needs?
CI/CD Implementation
How do you implement CI/CD pipelines?
What tools have you used (e.g., Jenkins, GitLab CI/CD, CircleCI, GitHub Actions) and how did they streamline deployment processes?
Security & Compliance
How do you address security and compliance in your DevOps practices?
Can you give an example of a project where you had to implement specific security measures or policies?
Observability
Can you explain the concept of observability in modern systems?
How have you implemented observability in your previous roles (metrics, logs, traces)?
Collaboration with Development Teams
How do you ensure effective collaboration and communication between development and operations teams?
Can you share an example of a successful DevOps collaboration experience?
Challenging Project
Can you describe a particularly challenging DevOps project you've worked on?
What obstacles did you face, and how did you overcome them?

AWS DevOps Interview Questions
What are the stages in Git?
Explain the most commonly used commands in Git.
What is the difference between git rebase, git merge, and git cherry-pick?
Explain the role of Ansible and its usage in your projects.
What is Ansible Tower?
What is Ansible Vault?
How is Jenkins integrated into your workflow?
What is your exact role when working with Jenkins?
If a customer wants to deploy a project onto Kubernetes clusters, what steps would you follow? Explain step by step.
If a customer wants to deploy a new service into an existing Kubernetes application, and the Docker image is already provided, what files need to be created and what is the procedure?
What is the typical output from Jenkins jobs?
How do you create manifest repositories?
What is the usage of ArgoCD?
If pods are running but suddenly become insufficient, how do you scale them?
What types of resources are defined in YAML files? What is the structure, and how are specific files defined?
If a pod is deleted, how is it recreated automatically?
In a K8s deployment with 6 pods, if 1 pod is deleted, how is it automatically recreated?
What is the difference between a pod and a container?
What is the usage of Lambda functions in AWS?
What is the maximum execution time for a Lambda function?
How does a Lambda function work?
What are triggers in Lambda? Give an example.
What is the difference between Git clone and Git fork?
What is the difference between Git pull and Git fetch?
What is the difference between VPC and VPN?
How can you capture all VPC-related network details?
If access is allowed in security groups but the IP is blocked in a NACL, how does it work? Explain.
What is AWS PrivateLink?
What is VPC Peering?
What does kube-proxy do, and what is the role of kubelet?

Scenario-based Cloud Solution Architect interview questions :
1. Your client wants to implement a global SaaS platform with strict data residency requirements per region. How would you architect this using Azure or AWS?
2. A business running on Kubernetes in the cloud experiences pod evictions due to resource limits. How do you redesign the cluster for reliability and scalability?
3. A financial firm wants to run multi-region disaster recovery simulations with zero data loss. What cloud architecture will support this?
4. A retail enterprise is migrating to microservices but lacks a unified identity management layer. How would you implement secure identity federation across services?
5. A logistics app needs real-time vehicle tracking and alerting with millions of messages per hour. How would you architect the ingestion and alert pipeline?
6. A large bank wants to host private APIs on the cloud accessible only from internal VPCs and partner networks. How would you ensure security and high availability?
7. You’re asked to design a unified logging and SIEM pipeline across Azure, AWS, and GCP. What architecture would you propose?
8. A SaaS company serving 100K+ tenants wants full tenant isolation, custom scaling, and usage-based billing. What multi-tenant cloud design do you suggest?
9. You find inconsistent resource tagging across 12 cloud subscriptions, impacting cost and governance. How do you enforce tagging and automate compliance?
10. A government client wants to run confidential workloads in the public cloud with TPM/HSM level encryption. How would you meet this requirement?
11. The CTO wants to modernize 300+ on-prem apps over 18 months using a phased approach. How would you roadmap and prioritize this transformation?
12. A customer wants to run real-time fraud detection using AI/ML in their existing payment system. How do you integrate it with minimal impact?
13. A telecom firm requires 5G network slicing support integrated with cloud workloads. What’s your approach to edge computing in this scenario?
14. You inherit a poorly documented IaC repository spanning Terraform, ARM templates, and Bicep. What’s your strategy to standardize and refactor it?
15. The security team needs audit trails and tamper-proof logs for critical cloud apps. How do you implement immutable logging and forensic readiness?

DevOps Interview Questions (Experience: 2 Years)
1. Self Introduction
2. Explain Detailed CI-CD Pipeline
3. Which Branching strategy you have used in your company.
4. How to build and deploy an application using docker.
5. What is difference between feature branch and Release branch.
6. Who will merge the code in your team.
7. What is docker file, Docker Image and Docker containers
8. Difference between Docker add and docker copy
9. How many pods are present in one node and how many containers are in one pod .
10. What is the efficient way pod have one container or multiple container.
11. how to measure the metrics in kubernetes.
12. What is port of DNS, SSH and HTTPS.
13. if you have new EC2 and RDS how can connect RDS with EC2.
14. Explain S3 storage classes
15. any idea on AWS S3 bucket backup
16. how to create AWS Lambda how it's works.
17. How to store Terraform statefile. how can protect it multiple users are not used . how to secure it.
18. I stored state file in remote and currently running state file is different. Is it possible to update?

Git Questions :brain::computer:
What is Git?
What is a repository in Git?
What is the difference between Git and GitHub?
What is origin in Git?
What is the purpose of the .gitignore file?
What is a version control system (VCS)?
What is the git push command?
What is the git pull command?
What does git clone do?
What are the advantages of using Git?
What is the difference between git init and git clone?
What is git status?
What is a commit in Git?
What is the purpose of the git clean command?

𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰 𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 𝐨𝐟 𝐃𝐞𝐯𝐎𝐩𝐬 𝐄𝐧𝐠𝐢𝐧𝐞𝐞𝐫 :bookmark_tabs:
𝙍𝒐𝙪𝒏𝙙 2 - 𝙏𝒆𝙘𝒉𝙣𝒊𝙘𝒂𝙡 𝙍𝒐𝙪𝒏𝙙 1
𝑫𝙪𝒓𝙖𝒕𝙞𝒐𝙣 - 1 𝒉𝙤𝒖𝙧
𝑫𝙚𝒔𝙞𝒈𝙣𝒂𝙩𝒊𝙤𝒏 - 𝘿𝒆𝙫𝑶𝙥𝒔 & 𝑪𝙡𝒐𝙪𝒅 𝑰𝙣𝒇𝙧𝒂𝙨𝒕𝙧𝒖𝙘𝒕𝙪𝒓𝙚 𝙀𝒏𝙜𝒊𝙣𝒆𝙚𝒓
𝙀𝒙𝙥𝒆𝙧𝒊𝙚𝒏𝙘𝒆 - 2+𝒀𝙚𝒂𝙧𝒔
1. What types of 𝐭𝐚𝐬𝐤𝐬 were you working on?
2. Do you have 𝐞𝐱𝐩𝐞𝐫𝐢𝐞𝐧𝐜𝐞 in creating a 𝐩𝐢𝐩𝐞𝐥𝐢𝐧𝐞?
3. What does the term 𝐂𝐈 mean and what does the work 𝐂𝐃 mean
4. What all 𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬 have you worked with 𝐀𝐖𝐒
5. Difference between 𝐈𝐀𝐌 𝐫𝐨𝐥𝐞 and 𝐈𝐀𝐌 𝐮𝐬𝐞𝐫.
6. What does 𝐈𝐀𝐌 𝐫𝐨𝐥𝐞 do
7. What is principal in 𝐈𝐀𝐌 𝐫𝐨𝐥𝐞?
8. What kind of tasks were you performing for your 𝐄𝐂𝟐 instances.
9. What is 𝐬𝐞𝐜𝐮𝐫𝐢𝐭𝐲 𝐠𝐫𝐨𝐮𝐩
10. Difference between 𝐬𝐞𝐜𝐮𝐫𝐢𝐭𝐲 𝐠𝐫𝐨𝐮𝐩 and 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 𝐚𝐜𝐥
11. What is an access policy for 𝐬𝟑
12. What is a 𝐠𝐥𝐚𝐜𝐢𝐞𝐫 tier in 𝐬𝟑?
13. Cost wise it is less then why we don't keep all the files in 𝐆𝐥𝐚𝐜𝐢𝐞𝐫
14. What if I have 1000 of file and cannot go through each and every file, we need to archive older files in my 𝐬𝟑 𝐛𝐮𝐜𝐤𝐞𝐭, when we move them to a different tier.
 After 6 months I don't need my file in 𝐬𝟑 𝐛𝐮𝐜𝐤𝐞𝐭, so after 6 months move to glacier and after one year it should get deleted automatically
15. What is autoscaling group
16. Have you worked on 𝐥𝐨𝐚𝐝 𝐛𝐚𝐥𝐚𝐧𝐜𝐞𝐫𝐬. What are the types?
17. What is 𝐠𝐚𝐭𝐞𝐰𝐚𝐲 𝐥𝐨𝐚𝐝 𝐛𝐚𝐥𝐚𝐧𝐜𝐞𝐫𝐬
18. Difference between 𝐀𝐋𝐁 and 𝐍𝐋𝐁
19. Let's say you have 2 different 𝐕𝐏𝐂𝐬 and you have to establish communication between resource in those 2. What will you do
20. How you configure 𝐕𝐏𝐂 𝐏𝐞𝐞𝐫𝐢𝐧𝐠

AWS DevOps Interview Questions
:white_check_mark: Basic Conceptual Level
Describe the core principles of DevOps and its benefits in cloud environments.
Explain the difference between Infrastructure as Code (IaC) and Infrastructure as a Service (IaaS).
List and briefly explain the three main service categories offered by AWS.
What are the different types of EC2 instances, and how would you choose the right one for a specific application?
Explain the concept of security groups and access control lists (ACLs) in AWS.
What are the benefits of using VPCs in AWS?
Describe the different types of S3 storage classes and their use cases.
Explain the purpose of CloudWatch and how it can be used for monitoring and logging in AWS.
What are the key features of AWS Lambda and when would you use it?
Explain the concept of autoscaling and how it can be implemented in AWS.
:white_check_mark: Advanced Conceptual Level
Compare and contrast the features of CodePipeline and CodeDeploy for CI/CD in AWS.
Explain the concept of serverless architectures and their benefits and challenges.
Discuss the different options for containerization in AWS, such as ECS and EKS, and their advantages and disadvantages.
Describe the role of infrastructure as code (IaC) tools like Terraform and CloudFormation in DevOps practices.
Explain the concept of Infrastructure as Code (IaC) testing and how it can be implemented in AWS.
Discuss the different strategies for disaster recovery in AWS.
Explain the importance of security best practices in AWS, such as IAM and VPCs.
What are the different types of AWS cost optimization strategies?
Describe the role of serverless observability tools like CloudWatch Logs Insights and Amazon OpenSearch Service in monitoring serverless applications.
Explain the concept of Blue/Green deployments and how they can be implemented in AWS.

AWS DevOps Interview Questions
:white_check_mark: Expert Level
01. Discuss your experience with advanced AWS services like CloudFormation custom
resources, Lambda Layers, and Step Functions.
02. Explain how you would implement infrastructure encryption for sensitive data in AWS.
03. Describe your knowledge of security best practices for serverless applications in AWS.
04. How would you design and implement a highly available and scalable architecture for a web
application in AWS?
05. Explain your approach to performance optimization for your AWS applications.
06. Discuss your experience with automating security audits and compliance checks in AWS.
07. How do you stay up-to-date with the latest advancements in AWS technologies and best
practices?
08. Describe a challenging technical problem you encountered in a DevOps project and how
you solved it.
09. Explain your experience with cloud cost management tools and strategies.
10. Discuss your approach to building and maintaining a DevOps culture within an organization.
:white_check_mark: Expert Level Questions with Scenarios from Production Environment
01. Scenario: Your company's e-commerce website experiences a sudden surge in traffic during
a flash sale, causing application crashes and outages.
How would you diagnose and resolve the issue while minimizing downtime and lost sales?
02. Scenario: A critical database in your production environment becomes corrupted due to
accidental data deletion.
How would you recover the database and ensure data integrity?
03. Scenario: Your company's internal development platform, hosted on EC2 instances,
experiences frequent performance bottlenecks and slow build times.
How would you optimize the infrastructure and CI/CD pipeline to improve developer
productivity?
04. Scenario: A security vulnerability is discovered in your company's public-facing API.
How would you quickly patch the vulnerability and prevent further breaches?
05. Scenario: You are tasked with migrating a legacy application from on-premises infrastructure
to AWS.
How would you approach this migration process to ensure a smooth and successful transition?
06. Scenario: Your company's website is experiencing high latency and slow page load times.
How would you identify the root cause of the issue and implement performance improvements?
07. Scenario: An unauthorized access attempt is detected on one of your AWS S3 buckets.
How would you investigate the incident, contain the damage, and prevent future occurrences?
08. Scenario: You are tasked with automating the deployment process for your company's
microservices architecture.
How would you design and implement a reliable and scalable CI/CD pipeline?
09. Scenario: Your company is experiencing high costs associated with their AWS environment.
How would you identify and implement cost-saving measures without impacting performance or
security?
10. Scenario: Your company is planning to adopt a DevOps culture.
How would you contribute to this transition and help break down silos between development
and operations teams?

Interview Questions
Tell me about yourself, Day to day activity, project role,
1.What is a state file in terraform?
2.What is Terraform Remote state backend?
3.What is the Difference between Virtualization and containerization?
4.What problem does Docker Solves?
5.What is Dockerfile and why do we use it?
6.Explain the workflow of how a Docker Container is created?
7.How do you manage multiple Containers?
8.What is Ci and CD in CICD?
9.What CICD tools have you used in the past?
10.How will you create a CICD pipeline to update the website or app on every commit to a particular branch? (mostly asked in the coding test).
11.Explain staging, production and testing environment.
12.What is a Blue Green Deployment?
13.Explain Canary Deployment?
14.What is the biggest issue you faced, how did you resolve it.?
15.How do you scale your application?
16.How do you rollback if something fails?
17.How do you automate Deployments?
18.Which tools have you used for automating deployment?
19.Your company is moving its infrastructure from on-premises to AWS. What steps would you take to plan the migration?
20.You need to migrate an existing application from an on-premises server to AWS EC2 instances. How would you approach the migration process?
21.A company has a web application running on EC2 instances and RDS databases. How would you implement a backup and restore process for the web application?
22.Your application is deployed to ECS, but you need to implement centralized logging for all containers. How would you integrate ECS with AWS CloudWatch or another logging service?
23.. What is an EC2 Spot Instance, and how does it differ from On-Demand and Reserved Instances?
24. How would you secure a Kubernetes cluster running on AWS EKS, considering RBAC, network policies, and secrets management?


	
	

